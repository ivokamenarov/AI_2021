import math

infinity = math.inf


class Game:
    def legal_moves(self, state):
        pass

    def make_move(self, move, state):
        pass

    def utility(self, state, player):
        pass

    def terminal_test(self, state):
        return not self.legal_moves(state)

    def to_move(self, state):
        return state.to_move

    def display(self, state):
        print(state)

    def successors(self, state):
        return [self.make_move(move, state)
                for move in self.legal_moves(state)]


class FigGame(Game):

    succs = {
        'n1': ['n2', 'n3', 'n4'],
        'n2': ['n5', 'n6', 'n7'],
        'n3': ['n8', 'n9', 'n10'],
        'n4': ['n11', 'n12', 'n13'],
        'n5': ['n14', 'n15'],
        'n6': ['n16', 'n17'],
        'n7': ['n18', 'n19'],
        'n8': ['n20', 'n21'],
        'n9': ['n22', 'n23'],
        'n10': ['n24', 'n25'],
        'n11': ['n26', 'n27'],
        'n12': ['n28', 'n29'],
        'n13': ['n30', 'n31']
    }
    utils = dict(n14=6, n15=7, n16=8, n17=10, n18=10,
                 n19=4, n20=4, n21=3, n22=0, n23=5,
                 n24=3, n25=4, n26=8, n27=9, n28=5,
                 n29=4, n30=10, n31=2)
    min = ['n1', 'n5', 'n6', 'n7', 'n8', 'n9', 'n10', 'n11', 'n12', 'n13']
    initial = 'n1'

    def successors(self, state):
        pass

    def utility(self, state, player):
        pass

    def terminal_test(self, state):
        pass

    def to_move(self, state):
        pass


# Minimax Search
def minimax_decision(state, game):

    def better(state1, state2, fn):
        pass

    def best_value(state):
        pass

    # Body of minimax_decision starts here:
    pass